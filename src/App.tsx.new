import React, { useEffect, useState } from 'react';
import Editor from './components/Editor';
import Sidebar from './components/Sidebar';
import ContentArea from './components/ContentArea';
import { ResizableHandle, ResizablePanel, ResizablePanelGroup } from './components/ui/resizable';
import { ChevronLeft, ChevronRight, Search, X, Maximize2, Minimize2 } from 'lucide-react';

const App: React.FC = () => {
  const [activeTab, setActiveTab] = useState('explorer');
  const [contentSize, setContentSize] = useState(20);
  const [isRightSidebarCollapsed, setIsRightSidebarCollapsed] = useState(false);
  const [currentContent, setCurrentContent] = useState("");
  const [openFiles] = useState<string[]>(['electron-dev.js', 'package.json', 'app.tsx']);
  const [activeFile, setActiveFile] = useState<string>('app.tsx');
  const [showTerminal, setShowTerminal] = useState(false);
  const [activeTerminalTab, setActiveTerminalTab] = useState('TERMINAL');
  const defaultContentSize = 20;

  const toggleRightSidebar = () => {
    setIsRightSidebarCollapsed((prev) => !prev);
  };
  const handleTabClick = (tab: string) => {
    if (tab === activeTab) {
      toggleRightSidebar(); // Đảo trạng thái sidebar
    } else {
      setActiveTab(tab);
      setIsRightSidebarCollapsed(false); // Mở sidebar khi đổi tab
    }
  };
  const updateCurrentContent = (content: string) => {
    setCurrentContent(content);
  };
  const handleFileSelect = (filePath: string) => {
    loadFileContent(filePath);
    console.log('File selected:', filePath);
  };
  const loadFileContent = (fileName: string) => {
    window.electron.ipcRenderer.send('open-file-request', fileName);
  };

  const toggleTerminal = () => {
    setShowTerminal(prev => !prev);
  };

  const handleTerminalTabClick = (tab: string) => {
    setActiveTerminalTab(tab);
  };

  // Xử lý phím tắt
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      // Ctrl+Shift+` để hiển thị/ẩn terminal
      if (e.ctrlKey && e.shiftKey && e.key === '`') {
        toggleTerminal();
      }
    };

    window.addEventListener('keydown', handleKeyDown);
    return () => {
      window.removeEventListener('keydown', handleKeyDown);
    };
  }, []);

  useEffect(() => {
    setContentSize(isRightSidebarCollapsed ? 0 : defaultContentSize);
  }, [isRightSidebarCollapsed]);

  return (
    <div className="flex flex-col h-screen bg-[#1e1e1e] text-white">
      {/* Top Menu Bar */}
      <div className="flex items-center bg-[#3c3c3c] h-[32px] px-2 text-sm">
        <div className="flex space-x-4">
          <span className="hover:bg-[#505050] px-2 py-1 cursor-pointer">File</span>
          <span className="hover:bg-[#505050] px-2 py-1 cursor-pointer">Edit</span>
          <span className="hover:bg-[#505050] px-2 py-1 cursor-pointer">Selection</span>
          <span className="hover:bg-[#505050] px-2 py-1 cursor-pointer">View</span>
          <span className="hover:bg-[#505050] px-2 py-1 cursor-pointer">Go</span>
          <span className="hover:bg-[#505050] px-2 py-1 cursor-pointer">Run</span>
          <span className="hover:bg-[#505050] px-2 py-1 cursor-pointer">...</span>
        </div>
        <div className="flex items-center ml-4">
          <ChevronLeft className="w-4 h-4 mx-1 cursor-pointer" />
          <ChevronRight className="w-4 h-4 mx-1 cursor-pointer" />
          <div className="flex items-center bg-[#252526] rounded mx-2 px-2 py-1 w-[200px]">
            <Search className="w-4 h-4 mr-2" />
            <input
              type="text"
              placeholder="testnestjs"
              className="bg-transparent border-none outline-none text-sm w-full"
            />
          </div>
        </div>
        <div className="flex ml-auto space-x-2">
          <Minimize2 className="w-4 h-4 cursor-pointer" />
          <Maximize2 className="w-4 h-4 cursor-pointer" />
          <X className="w-4 h-4 cursor-pointer" />
        </div>
      </div>

      {/* File Tabs */}
      <div className="flex bg-[#252526] h-[35px] text-sm overflow-x-auto">
        {openFiles.map(file => (
          <div
            key={file}
            className={`flex items-center px-3 py-1 border-r border-[#3c3c3c] cursor-pointer ${activeFile === file ? 'bg-[#1e1e1e]' : 'bg-[#2d2d2d]'}`}
            onClick={() => setActiveFile(file)}
          >
            <span className={`${file === 'electron-dev.js' ? 'text-yellow-500' : file === 'package.json' ? 'text-orange-400' : 'text-blue-400'} mr-2`}>•</span>
            <span>{file}</span>
            <span className="ml-2 text-gray-500 hover:text-white">×</span>
          </div>
        ))}
      </div>

      <div className="flex flex-1 overflow-hidden">
        {/* Sidebar */}
        <Sidebar setActiveTab={setActiveTab} activeTab={activeTab} onTabClick={handleTabClick} />

        {/* Resizable layout */}
        <ResizablePanelGroup direction="horizontal" className="flex flex-1"
          key={contentSize}
        >
          {/* Content Area */}
          <ResizablePanel
            defaultSize={isRightSidebarCollapsed ? 0 : contentSize}
            className="bg-[#252526]"
          >
            <div className="flex flex-col h-full">
              <div className="flex items-center justify-between p-2 text-xs uppercase tracking-wider">
                <span>Explorer</span>
                <span>...</span>
              </div>
              <div className="flex items-center p-2 text-sm">
                <span className="font-semibold">text-editor-app</span>
                <span className="ml-auto text-xs">▾</span>
              </div>
              <ContentArea
                activeTab={activeTab}
                onFileSelect={handleFileSelect}
                currentContent={currentContent}
              />
            </div>
          </ResizablePanel>

          <ResizableHandle />

          {/* Editor Area */}
          <ResizablePanel
            defaultSize={100 - contentSize} minSize={30}
            className="bg-[#1e1e1e]"
          >
            <div className="flex flex-col h-full">
              <Editor
                loadFileContent={loadFileContent}
                updateContent={updateCurrentContent}
              />
            </div>
          </ResizablePanel>
        </ResizablePanelGroup>
      </div>

      {/* Terminal Area - Chỉ hiển thị khi showTerminal = true */}
      {showTerminal && (
        <div className="bg-[#1e1e1e] border-t border-[#3c3c3c]" style={{ height: '35%' }}>
          <div className="flex bg-[#252526] text-sm">
            <div 
              className={`px-3 py-1 border-r border-[#3c3c3c] cursor-pointer ${activeTerminalTab === 'PROBLEMS' ? 'bg-[#1e1e1e]' : ''}`}
              onClick={() => handleTerminalTabClick('PROBLEMS')}
            >
              PROBLEMS
            </div>
            <div 
              className={`px-3 py-1 border-r border-[#3c3c3c] cursor-pointer ${activeTerminalTab === 'OUTPUT' ? 'bg-[#1e1e1e]' : ''}`}
              onClick={() => handleTerminalTabClick('OUTPUT')}
            >
              OUTPUT
            </div>
            <div 
              className={`px-3 py-1 border-r border-[#3c3c3c] cursor-pointer ${activeTerminalTab === 'DEBUG CONSOLE' ? 'bg-[#1e1e1e]' : ''}`}
              onClick={() => handleTerminalTabClick('DEBUG CONSOLE')}
            >
              DEBUG CONSOLE
            </div>
            <div 
              className={`px-3 py-1 border-r border-[#3c3c3c] cursor-pointer ${activeTerminalTab === 'TERMINAL' ? 'bg-[#1e1e1e]' : ''}`}
              onClick={() => handleTerminalTabClick('TERMINAL')}
            >
              TERMINAL
            </div>
            <div 
              className={`px-3 py-1 border-r border-[#3c3c3c] cursor-pointer ${activeTerminalTab === 'PORTS' ? 'bg-[#1e1e1e]' : ''}`}
              onClick={() => handleTerminalTabClick('PORTS')}
            >
              PORTS
            </div>
            <div 
              className={`px-3 py-1 cursor-pointer ${activeTerminalTab === 'AUGMENT NEXT EDIT' ? 'bg-[#1e1e1e]' : ''}`}
              onClick={() => handleTerminalTabClick('AUGMENT NEXT EDIT')}
            >
              AUGMENT NEXT EDIT
            </div>
            <div className="ml-auto px-3 py-1 cursor-pointer" onClick={toggleTerminal}>
              <X size={14} />
            </div>
          </div>
          {activeTerminalTab === 'TERMINAL' && (
            <div className="p-2 text-sm font-mono text-green-400 h-full overflow-auto">
              <div>$ cross-env ELECTRON=true concurrently "npm run dev" "node electron-dev.js"</div>
              <div className="text-white">[1] Core socket server running on port 5000</div>
              <div className="text-white">[0] {">"}text-editor-app@0.0.0 dev</div>
              <div className="text-white">[0] {">"}vite</div>
              <div className="text-white">[0]</div>
              <div className="text-white">[0] VITE v6.2.0 ready in 383 ms</div>
              <div className="text-white">[0]</div>
              <div className="text-white">[0] ➜ Local: <span className="text-blue-400">http://localhost:5173/</span></div>
              <div className="text-white">[0] ➜ Network: use --host to expose</div>
              <div className="text-white">[0]</div>
            </div>
          )}
          {activeTerminalTab === 'PROBLEMS' && (
            <div className="p-2 text-sm text-white h-full overflow-auto">
              <div className="flex items-center justify-center h-full text-gray-400">
                No problems have been detected in the workspace.
              </div>
            </div>
          )}
          {activeTerminalTab === 'OUTPUT' && (
            <div className="p-2 text-sm text-white h-full overflow-auto">
              <div className="flex items-center justify-center h-full text-gray-400">
                No output to show.
              </div>
            </div>
          )}
          {activeTerminalTab === 'DEBUG CONSOLE' && (
            <div className="p-2 text-sm text-white h-full overflow-auto">
              <div className="flex items-center justify-center h-full text-gray-400">
                Debug console is inactive.
              </div>
            </div>
          )}
          {activeTerminalTab === 'PORTS' && (
            <div className="p-2 text-sm text-white h-full overflow-auto">
              <div className="flex flex-col">
                <div className="flex justify-between p-2 border-b border-[#3c3c3c]">
                  <span>Port</span>
                  <span>Process</span>
                  <span>Status</span>
                </div>
                <div className="flex justify-between p-2">
                  <span>5173</span>
                  <span>Vite Dev Server</span>
                  <span className="text-green-500">Running</span>
                </div>
                <div className="flex justify-between p-2">
                  <span>5000</span>
                  <span>Core Socket Server</span>
                  <span className="text-green-500">Running</span>
                </div>
              </div>
            </div>
          )}
          {activeTerminalTab === 'AUGMENT NEXT EDIT' && (
            <div className="p-2 text-sm text-white h-full overflow-auto">
              <div className="flex items-center justify-center h-full text-gray-400">
                Augment Next Edit is ready.
              </div>
            </div>
          )}
        </div>
      )}

      {/* Status Bar */}
      <div className="flex items-center justify-between bg-[#007acc] text-white text-xs h-[22px] px-2">
        <div className="flex items-center space-x-2">
          <span>Go Live</span>
          <span>Augment</span>
        </div>
        <div className="flex items-center space-x-4">
          <span>Ln 24, Col 5</span>
          <span>Spaces: 2</span>
          <span>UTF-8</span>
          <span>CRLF</span>
          <span>TypeScript JSX</span>
        </div>
      </div>
    </div>
  );
}

export default App;
